// Normally, I recommend using Mutli-file components [1], but for the sake of
// easy readability on Github, the components in this sample app are in one file
// The primary difference is each section (JS, style, and HTML) would be in it's
// own file if this were a multi-file component
// [1] http://markojs.com/docs/components/#multi-file-components

class {
    // Initialize the board here
    onCreate(input) {
        this.state = {
            height: input.height, // Height of the game board
            width: input.width,   // Width of the game board
            boardState: Array(input.height).fill().map(()=> new Array(input.width)),
            playing: false // true when the game is being played, false when not
        };
    }

    // Randomizes the alive / not alive states of each cell
    randomizeBoard() {
        for(let y = 0; y < this.getHeight(); y++) {
            for(let x = 0; x < this.getWidth(); x++) {
                this.state.boardState[y][x] = (Math.random() >= 0.76);
            }
        }
        this.setStateDirty('boardState');
    }

    // Convenience Methods
    getBoardState() {
        return this.state.boardState;
    }
    getWidth() {
        return this.getBoardState()[0].length;
    }
    getHeight() {
        return this.getBoardState().length;
    }
    cellIsAlive(x, y) {
        return this.getBoardState()[y][x];
    }
    cellEnabled(x, y) {
        return this.cellIsAlive(x, y);
    }
    togglePoint(x, y) {
        this.state.boardState[y][x] = !this.state.boardState[y][x];
        this.setStateDirty('boardState');
    }

    calculateNextTile(x, y) {
        // Accumulate count of all neighbors
        const aliveNeighborCount = [
            [-1, -1], [0,-1], [1, -1],
            [-1,  0], /*:)*/, [1,  0],
            [-1,  1], [0, 1], [1,  1]
        ].reduce((aliveNeighborCounter, relativePositionVector) => {
            const neightborX = x + relativePositionVector[0];
            const neightborY = y + relativePositionVector[1];
            if (typeof this.state.boardState[neightborY] !== "undefined" &&
                typeof this.state.boardState[neightborY][neightborX] !== "undefined" &&
                this.state.boardState[neightborY][neightborX]) {
                aliveNeighborCounter++;
            }
            return aliveNeighborCounter;
        }, 0);
        const currentCellAlive = this.state.boardState[y][x] === true;
        if (currentCellAlive) {
            return (aliveNeighborCount === 2 || aliveNeighborCount === 3);
        }
        return aliveNeighborCount === 3;
    }

    // Calculates + Sets the state for the next iteration
    getNextIteration() {
        const nextBoardState = new Array(this.getHeight());
        for(let y = 0; y < this.getHeight(); y++) {
            nextBoardState[y] = new Array(this.state.boardState[y].length);
            for(let x = 0; x < this.getWidth(); x++) {
                nextBoardState[y][x] = this.calculateNextTile(x, y);
            }
        }
        return nextBoardState;
    }

    setNextIteration(nextBoardState) {
        this.state.boardState = nextBoardState;
    }

    tick() {
        this.setNextIteration(this.getNextIteration());
    }

    play() {
        setInterval(this.tick.bind(this), 500);
    }
}



style {
    body {
        font-family: monospace;
    }
    table {
        user-select: none; /* Try to avoid accidentally selecting rows while toggling */
        border: 1px solid #eee;
        margin: 10px;
    }
    td {
        cursor: pointer;
        height: 17px;
        width: 14px;
    }
    button {
        margin-left: 10px;
    }
    .cell-enabled {
        background: #000000;
    }
}


// You may use concise syntax, however I prefer the HTML version
<div>
    <!-- <button on-click('tick')>
        Next Iteration
    </button> -->
    <button on-click('randomizeBoard')>
        Randomize Board
    </button>
    <button on-click('play')>
        Automatically Play
    </button>

    <table>
        <tbody>
            <tr for(let y = 0; y < component.getHeight(); y++)>
                <td for(let x = 0; x < component.getWidth(); x++)
                    on-click("togglePoint", x, y)
                    class={ "cell-enabled": component.cellEnabled(x, y) }>
                    &nbsp;
                </td>
            </tr>
        </tbody>
    </table>
</div>
